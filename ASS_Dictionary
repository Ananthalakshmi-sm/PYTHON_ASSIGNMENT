{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "{\n",
        " \"cells\": [\n",
        "  {\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"33c835ab\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# Ask user to give name and marks of 10 different students. Store them in dictionary.\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans:\\n\",\n",
        "    \"\\n\"\n",
        "   ]\n",
        "  },"
      ],
      "metadata": {
        "id": "ACPmH2BGp6sL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "students = {}\n",
        "for i in range(1, 11):\n",
        "    name = input(f\"Enter name of student {i}: \")\n",
        "    while True:\n",
        "        try:\n",
        "            marks = float(input(f\"Enter marks of {name}: \"))\n",
        "            break\n",
        "        except ValueError:\n",
        "            print(\"Please enter a valid number for marks.\")\n",
        "    students[name] = marks\n",
        "\n",
        "print(\"\\nStudent marks dictionary:\")\n",
        "print(students)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L8uIjMMSqWMa",
        "outputId": "9c1d78ef-3fb5-4acf-e2ea-0b8107d0a4bf"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name of student 1: junnu\n",
            "Enter marks of junnu: 80\n",
            "Enter name of student 2: Arvi\n",
            "Enter marks of Arvi: 65\n",
            "Enter name of student 3: cherry\n",
            "Enter marks of cherry: 76\n",
            "Enter name of student 4: deepa\n",
            "Enter marks of deepa: 89\n",
            "Enter name of student 5: shreya\n",
            "Enter marks of shreya: 90\n",
            "Enter name of student 6: shravya\n",
            "Enter marks of shravya: 76\n",
            "Enter name of student 7: venu\n",
            "Enter marks of venu: 90\n",
            "Enter name of student 8: chandan\n",
            "Enter marks of chandan: 77\n",
            "Enter name of student 9: Mahesh\n",
            "Enter marks of Mahesh: 99\n",
            "Enter name of student 10: meghana\n",
            "Enter marks of meghana: 88\n",
            "\n",
            "Student marks dictionary:\n",
            "{'junnu': 80.0, 'Arvi': 65.0, 'cherry': 76.0, 'deepa': 89.0, 'shreya': 90.0, 'shravya': 76.0, 'venu': 90.0, 'chandan': 77.0, 'Mahesh': 99.0, 'meghana': 88.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "{\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"3ba8f842\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# Sort the dictionary created in previous example according to marks.\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans\\n\"\n",
        "   ]\n",
        "  },\n"
      ],
      "metadata": {
        "id": "REdyHCmErw_e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sorted_students = dict(sorted(students.items(), key=lambda item: item[1], reverse=True))\n",
        "print(\"Students sorted by marks (high to low):\")\n",
        "for name, marks in sorted_students.items():\n",
        "    print(f\"{name}: {marks}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X2fQ-WJkrysN",
        "outputId": "d47bccbd-2779-46cf-8957-9aae03b8dd1d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Students sorted by marks (high to low):\n",
            "Mahesh: 99.0\n",
            "shreya: 90.0\n",
            "venu: 90.0\n",
            "deepa: 89.0\n",
            "meghana: 88.0\n",
            "junnu: 80.0\n",
            "chandan: 77.0\n",
            "cherry: 76.0\n",
            "shravya: 76.0\n",
            "Arvi: 65.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "  {\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"8474aa31\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# Use dictionary to store antonyms of words. E.g.- 'Right':'Left', 'Up':'Down', etc. \\n\",\n",
        "    \"# Display all words and then ask user to enter a word and display antonym of it.\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans\\n\"\n",
        "   ]\n",
        "  },"
      ],
      "metadata": {
        "id": "LVuyrHJesMJs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "antonyms = {\n",
        "    \"Right\": \"Left\",\n",
        "    \"Up\": \"Down\",\n",
        "    \"Hot\": \"Cold\",\n",
        "    \"Day\": \"Night\",\n",
        "    \"Happy\": \"Sad\",\n",
        "    \"Fast\": \"Slow\",\n",
        "    \"Light\": \"Dark\",\n",
        "    \"In\": \"Out\",\n",
        "    \"Big\": \"Small\",\n",
        "    \"Open\": \"Close\"\n",
        "}\n",
        "print(\"Available words:\")\n",
        "for word in antonyms.keys():\n",
        "    print(word)\n",
        "query = input(\"\\nEnter a word to find its antonym: \").strip().title()\n",
        "if query in antonyms:\n",
        "    print(f\"The antonym of '{query}' is '{antonyms[query]}'\")\n",
        "else:\n",
        "    print(f\"Sorry, '{query}' is not in the dictionary.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5hFcoLfAsNso",
        "outputId": "0658723d-3a6d-4f83-cdf2-a5ee5f284148"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available words:\n",
            "Right\n",
            "Up\n",
            "Hot\n",
            "Day\n",
            "Happy\n",
            "Fast\n",
            "Light\n",
            "In\n",
            "Big\n",
            "Open\n",
            "\n",
            "Enter a word to find its antonym: fast\n",
            "The antonym of 'Fast' is 'Slow'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "  {\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"fe98d9b6\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# Count the number of occurrence of each letter in word \\\"MISSISSIPPI\\\". \\n\",\n",
        "    \"# Store count of every letter with the letter in a dictionary.\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans\\n\"\n",
        "   ]\n",
        "  },\n"
      ],
      "metadata": {
        "id": "7cJiLeudstHT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "word = \"MISSISSIPPI\"\n",
        "letter_count = {}\n",
        "\n",
        "for letter in word:\n",
        "    if letter in letter_count:\n",
        "        letter_count[letter] += 1\n",
        "    else:\n",
        "        letter_count[letter] = 1\n",
        "\n",
        "print(\"Letter counts in 'MISSISSIPPI':\")\n",
        "for letter, count in letter_count.items():\n",
        "    print(f\"{letter}: {count}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Hd9t1XSst83",
        "outputId": "caa8d0f2-655a-4d58-ea8b-ef93f278bfa7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Letter counts in 'MISSISSIPPI':\n",
            "M: 1\n",
            "I: 4\n",
            "S: 4\n",
            "P: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "  {\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"789c3d27\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# From the previous question, sort according to the number of letters.\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans\\n\"\n",
        "   ]\n",
        "  },\n"
      ],
      "metadata": {
        "id": "sP4SttYNs9RT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sorted_letter_count = dict(sorted(letter_count.items(), key=lambda item: item[1], reverse=True))\n",
        "print(\"Letters sorted by frequency (high to low):\")\n",
        "for letter, count in sorted_letter_count.items():\n",
        "    print(f\"{letter}: {count}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HmojgLrNs-Ce",
        "outputId": "dc032178-6da9-4f9e-926a-4bf997fe0660"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Letters sorted by frequency (high to low):\n",
            "I: 4\n",
            "S: 4\n",
            "P: 2\n",
            "M: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "  {\n",
        "   \"cell_type\": \"code\",\n",
        "   \"execution_count\": null,\n",
        "   \"id\": \"de6c25e6\",\n",
        "   \"metadata\": {},\n",
        "   \"outputs\": [],\n",
        "   \"source\": [\n",
        "    \"# Take a list containg only strings. Now, take a string input from user and rearrange the elements of the list according to the number of occurence of the string taken from user in the elements of the list.\\n\",\n",
        "    \"# E.g.-LIST : [\\\"no bun\\\",\\\"bug bun bug bun bug bug\\\",\\\"bunny bug\\\",\\\"buggy bug bug buggy\\\"]\\n\",\n",
        "    \"#STRING TAKEN : \\\"bug\\\"\\n\",\n",
        "    \"# OUTPUT LIST:[\\\"bug bun bug bun bug bug\\\",\\\"buggy bug bug buggy\\\",\\\"bunny bug\\\",\\\"no bun\\\"]\\n\",\n",
        "    \"\\n\",\n",
        "    \"#ans\\n\",\n",
        "    \"\\n\"\n",
        "   ]\n",
        "  }\n",
        " ],\n",
        " \"metadata\": {\n",
        "  \"kernelspec\": {\n",
        "   \"display_name\": \"Python 3 (ipykernel)\",\n",
        "   \"language\": \"python\",\n",
        "   \"name\": \"python3\"\n",
        "  },\n",
        "  \"language_info\": {\n",
        "   \"codemirror_mode\": {\n",
        "    \"name\": \"ipython\",\n",
        "    \"version\": 3\n",
        "   },\n",
        "   \"file_extension\": \".py\",\n",
        "   \"mimetype\": \"text/x-python\",\n",
        "   \"name\": \"python\",\n",
        "   \"nbconvert_exporter\": \"python\",\n",
        "   \"pygments_lexer\": \"ipython3\",\n",
        "   \"version\": \"3.9.13\"\n",
        "  }\n",
        " },\n",
        " \"nbformat\": 4,\n",
        " \"nbformat_minor\": 5\n",
        "}\n"
      ],
      "metadata": {
        "id": "CfCSMKT4tSUL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "list = [\"no bun\", \"bug bun bug bun bug bug\", \"bunny bug\", \"buggy bug bug buggy\"]\n",
        "search_str = input(\"Enter the string to count: \").strip()\n",
        "\n",
        "sorted_list = sorted(list, key=lambda x: x.count(search_str), reverse=True)\n",
        "\n",
        "print(\"Sorted list based on occurrences of '{}':\".format(search_str))\n",
        "print(sorted_list)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WebcFBMbtTP5",
        "outputId": "a5b0c3f1-c0d5-42fa-d4f0-7f8b71c98114"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string to count: bug\n",
            "Sorted list based on occurrences of 'bug':\n",
            "['bug bun bug bun bug bug', 'buggy bug bug buggy', 'bunny bug', 'no bun']\n"
          ]
        }
      ]
    }
  ]
}
